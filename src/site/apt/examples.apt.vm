  -------------------------
  ${project.name} Examples
  -------------------------
  Keegan Witt
  -------------------------
  -------------------------

Examples

  The following examples describe the various ways ${project.name} can be used.

  * {{{Pure_Groovy_Compilation}Pure Groovy Compilation}}

  * {{{Joint_Compilation}Joint Compilation}}

  * {{{InvokeDynamic_Compilation}InvokeDynamic Compilation}}

  * {{{Groovydoc_for_Pure_Groovy}Groovydoc for Pure Groovy}}

  * {{{Groovydoc_for_Joint_Projects}Groovydoc for Joint Projects}}

  * {{{Add_Groovydoc_to_Site}Add Groovydoc to Site}}

  * {{{Execute_Scripts}Execute Scripts}}

  * {{{Working_with_Older_Groovy_Versions}Working with Older Groovy Versions}}

  []


* {Pure Groovy Compilation}

  To compile Groovy code as part of the project compilation when there are no
  dependencies between Java and Groovy, you should add something similar to
  the following in your <<<pom.xml>>>:

+-------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.5.0 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-------------------------------------------------------------------------+

  To compile both the main and test Groovy sources, simply execute the normal
  compile phase from the default lifecycle:

+---------------------------------------+
mvn compile
+---------------------------------------+


* {Joint Compilation}

  To compile projects where you have mixed Java and Groovy (with dependencies
  between the two), you'll need to generate stubs in addition to normal
  compilation.  To do this, you should add something similar to the following
  in your <<<pom.xml>>>:

+-------------------------------------------------------------------------+
<project>
  <build>
    <!-- using our customized lifecycle puts the Groovy sources into Maven's sources.
         Otherwise the stubs rather than the Groovy sources will be in the sources
         (although that may be what you want, for example in polyglot builds). -->
    <packaging>groovy-jar</packaging>
    <extensions>
      <extension>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generateStubs</goal>
              <goal>compile</goal>
              <goal>testGenerateStubs</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.8.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-------------------------------------------------------------------------+

  To compile both the main and test Groovy and Java sources, simply execute the
  normal compile phase from the default lifecycle:

+---------------------------------------+
mvn compile
+---------------------------------------+


* {InvokeDynamic Compilation}

  To take advantage of
  {{{http://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic}invokedynamic}},
  you need to include the Groovy jar that
  {{{http://groovy.codehaus.org/InvokeDynamic+support}supports it}} and set
  the configuration option.  If you only include the Groovy indy jar without
  setting the configuration option only Groovy's classes will take advantage
  of invokedynamic, your classes will not.  To do this, you should add
  something similar to the following in your <<<pom.xml>>>:

+-----------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <invokeDynamic>true</invokeDynamic>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any indy version of Groovy \>= 2.0.0-beta-3 should work here -->
      <version>${groovyVersion}</version>
      <classifier>indy</classifier>
    </dependency>
  </dependencies>
</project>
+-----------------------------------------------------------------------------+

  To compile both the main and test Groovy sources, simply execute the normal
  compile phase from the default lifecycle:

+---------------------------------------+
mvn compile
+---------------------------------------+


* {Groovydoc for Pure Groovy}

  To generate Groovydoc for mixed Groovy and Java projects manually, you
  only need add the plugin (no need to configure any executions).  To do
  this, you should add something similar to the following in your <<<pom.xml>>>:

+-----------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.6.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----------------------------------------------------------------------------+

  To generate the groovydoc for the main sources, simply execute GMavenPlus's
  groovydoc goal:

+---------------------------------------+
mvn gplus:groovydoc
+---------------------------------------+

  To make this easy to invoke (like above), you may want to add the plugin group to your <<<settings.xml>>>:

+-----------------------------------------------------------------------------+
<pluginGroups>
  <pluginGroup>org.codehaus.gmavenplus</pluginGroup>
<pluginGroups>
+-----------------------------------------------------------------------------+


* {Groovydoc for Joint Projects}

  To generate Groovydoc for joint Groovy projects manually, you only need
  add the plugin (no need to configure any executions).  To do this, you
  should add something similar to the following in your <<<pom.xml>>>:

+-----------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.8.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----------------------------------------------------------------------------+

  To generate the groovydoc for the main sources, simply execute GMavenPlus's
  generateStubs and groovydoc goals:

+---------------------------------------+
mvn gplus:generateStubs gplus:groovydoc
+---------------------------------------+

  To make this easy to invoke (like above), you may want to add the plugin group to your <<<settings.xml>>>:

+-----------------------------------------------------------------------------+
<pluginGroups>
  <pluginGroup>org.codehaus.gmavenplus</pluginGroup>
<pluginGroups>
+-----------------------------------------------------------------------------+

* {Add Groovydoc to Site}

  Note that this mojo is not set up to be used in the \<reporting\> section.
  So you will need to set the \<outputDirectory\> and \<executions\>
  to mimic this functionality.  To do this, you should add something
  similar to the following in your <<<pom.xml>>>:

+-----------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <phase>site</phase>
            <goals>
              <goal>generateStubs</goal>
              <goal>testGenerateStubs</goal>
              <goal>groovydoc</goal>
              <goal>testGroovydoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.8.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-------------------------------------------------------------------------+

  To generate the groovydoc for the main sources, simply execute the normal
  site phase from the default lifecycle:

+---------------------------------------+
mvn site
+---------------------------------------+


* {Execute Scripts}

  Note that if you'd like to separate script dependencies from those of your
  project, you can use Groovy's {{{http://groovy.codehaus.org/Grape}@Grab}}
  annotations, but you will need a compile dependency on Ivy.  Any plugin
  dependencies and any project test dependencies are also available for use
  in your scripts (remember that test scope also includes compile scope).
  This example demonstrates all three.  Note that you need to escape any dollar
  signs in your script so Maven doesn't try to filter the values.  Note that
  you can also add your own properties to use in the script (that can be set from
  the POM's properties or the command line.  To
  execute Groovy scripts in your <<<pom.xml>>>, add something similar to the following:

+-----------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>execute</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <properties>
            <property>
              <name>someProp</name>
              <value>${someProp}</value>
            </property>
          </properties>
          <scripts>
            <script><![CDATA[
              @Grapes([
                  @Grab(group='commons-lang', module='commons-lang', version='2.6')
              ])
              import org.apache.commons.lang.SystemUtils
              import org.slf4j.Logger
              import org.slf4j.LoggerFactory
              Logger logger = LoggerFactory.getLogger("chapters.introduction.HelloWorld1")
              logger.debug("This session's goals are {}.", session.goals)
              logger.debug("The settings are {}.", settings)
              logger.debug("The plugin artifacts are {}.", pluginArtifacts)
              logger.debug("The local repository is {}.", localRepository)
              logger.debug("The reactor projects are {}.", reactorProjects)
              logger.debug("someProp is {}.", someProp)
              File targetDir = new File(project.build.directory)
              if (!targetDir.exists())
                  targetDir.mkdir()
              new File(targetDir, 'javaVersion.txt').append("Using Java ${SystemUtils.JAVA_VERSION}")
            ]]></script>
            <script>src/main/resources/groovyScripts/someScript.groovy</script>
          </scripts>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <!-- any version of Groovy \>= 1.5.0 should work here -->
            <version>${groovyVersion}</version>
          </dependency>
          <dependency>
            <!-- this is only needed because the script uses it -->
            <groupId>org.apache.ivy</groupId>
            <artifactId>ivy</artifactId>
            <version>2.2.0</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <!-- this is only needed because the script uses it -->
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.0.13</version>
      <scope>compile</scope>
    </dependency>
  </dependencies>
</project>
+-----------------------------------------------------------------------------+

  To execute your script(s), simply execute GMavenPlus's execute goal:

+---------------------------------------+
mvn gplus:execute
+---------------------------------------+

  To make this easy to invoke (like above), you may want to add the plugin group to your <<<settings.xml>>>:

+-----------------------------------------------------------------------------+
<pluginGroups>
  <pluginGroup>org.codehaus.gmavenplus</pluginGroup>
<pluginGroups>
+-----------------------------------------------------------------------------+


* {Working with Older Groovy Versions}

  If the mojo you're trying to run doesn't support the version of Groovy you use
  at runtime, you can override the version used by the plugin to use a version
  that the mojo does support.  This is not the recommended solution (since
  there's the possibility of runtime API incompatibilities and in some cases it
  won't even compile).  It's better to just upgrade your Groovy version.
  However, if this isn't possible, simply add a dependency to the plugin.
  To do this, you should add something similar to the following in your <<<pom.xml>>>:

+-------------------------------------------------------------------------+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <!-- your goals here -->
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <!-- it's probably safest to use a version that's as close to the runtime version as possible, while still being compatible with the mojo -->
            <version>${someMojoCompatibleGroovyVersion}</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <version>${someOldGroovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-------------------------------------------------------------------------+
