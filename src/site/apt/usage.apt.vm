Usage

 The following examples describe the basic usage of the GMavenPlus Plugin.


* Contents

 * {{Basic Usage}}

 * {{Mixed Compilation}}

 * {{Generate Groovydoc}}

 * {{Add Groovydoc to Site}}

 * {{Execute Scripts}}

 []


* {Basic Usage}

 To compile Groovy code as part of the project compilation when there are no
 dependencies between Java and Groovy, you should add something similar to
 the following in your pom:

+-----+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----+

 When you execute <<<mvn compile>>>, both the main and test Groovy sources
 will be compiled.


* {Mixed Compilation}

 To compile projects where you have mixed Java and Groovy (with dependencies
 between the two), you'll need to generate stubs in addition to normal
 compilation.  To do this, you should add something similar to the following
 in your pom:

+-----+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generateStubs</goal>
              <goal>compile</goal>
              <goal>testGenerateStubs</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy >= 1.7.0 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----+

 When you execute <<<mvn generate-test-sources>>>, the stubs will be generated
 for both the main and test Groovy sources.


* {Generate Groovydoc}

 To generate Groovydoc manually, you only need add the plugin (no need to
 configure any executions).  To do this, you should add something similar
 to the following in your pom:

+-----+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.6.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----+

 When you execute <<<mvn gplus:groovydoc>>>, Groovydoc will be generated
 for the main sources.


* {Add Groovydoc to Site}

 Note that this mojo is not set up to be used in the \<reporting\> section.
 So you will need to set the \<outputDirectory\> and \<executions\>
 to mimic this functionality.  To do this, you should add something
 similar to the following in your pom:

+-----+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <phase>site</phase>
            <goals>
              <goal>groovydoc</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <groovydocOutputDirectory>\${project.reporting.outputDirectory}/gapidocs</groovydocOutputDirectory>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy \>= 1.6.2 should work here -->
      <version>${groovyVersion}</version>
    </dependency>
  </dependencies>
</project>
+-----+

 When you execute <<<mvn site>>>, Groovydoc will be generated for the main sources.


* {Execute Scripts}

 Note that you can't yet use project dependencies in your scripts.  You can
 use Groovy's {{{http://groovy.codehaus.org/Grape}@Grab}} annotations, but you
 will need a compile dependency on Ivy since GMavenPlus doesn't depend on Ivy.
 Also note that you need to escape any dollar signs in your script so Maven
 doesn't try to filter the values.
 To execute Groovy scripts in your pom, add something similar to the following:

+-----+
<project>
  <build>
    <plugins>
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>execute</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <scripts>
            <script><![CDATA[
              @Grapes([
                @Grab(group='commons-lang', module='commons-lang', version='2.6')
              ])
              import org.apache.commons.lang.SystemUtils
              println "Using Java $${SystemUtils.JAVA_VERSION}"
            ]]></script>
          </scripts>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    <dependency>
      <!-- this is only needed because the script uses it -->
      <groupId>org.apache.ivy</groupId>
      <artifactId>ivy</artifactId>
      <version>2.2.0</version>
    </dependency>
  </dependencies>
</project>
+-----+

 When you execute <<<mvn gplus:execute>>>, your scripts will be executed.
