Usage

 The following examples describe the basic usage of the GMavenPlus Plugin.


* Contents

 * {{Basic Usage}}

 * {{Generate Stubs}}

 * {{Generate Groovydoc}}

 * {{Add Groovydoc to Site}}

 * {{Execute Scripts}}

 []


* {Basic Usage}

 To compile Groovy code as part of the project compilation, you should add the GMavenPlus Plugin in the \<build\> section of your pom:

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>GMavenPlus</groupId>
        <artifactId>GMavenPlus-Plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          ...
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    ....
  </dependencies>
  ...
</project>
+-----+

 When you execute <<<mvn compile>>>, both the main and test Groovy sources will be compiled.


* {Generate Stubs}

 To generate stubs as part of the project compilation, you should add the GMavenPlus Plugin in the \<build\> section of your pom:

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>GMavenPlus</groupId>
        <artifactId>GMavenPlus-Plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>generateStubs</goal>
              <goal>testGenerateStubs</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          ...
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    ....
  </dependencies>
  ...
</project>
+-----+

 When you execute <<<mvn generate-test-sources>>>, the stubs will be generated for both the main and test Groovy sources.


* {Generate Groovydoc}

 Here is the basic usage to get Groovydoc in your target directory:

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>GMavenPlus</groupId>
        <artifactId>GMavenPlus-Plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          ...
        </executions>
        <configuration>
          ...
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    ....
  </dependencies>
  ...
</project>
+-----+

 When you execute <<<mvn gmavenplus:groovydoc>>>, Groovydoc will be generated for the main sources.


* {Add Groovydoc to Site}

 Note that this mojo is not set up to be used in the \<reporting\> section.
 So you will need to set the \<outputDirectory\> and \<executions\>
 to mimic this functionality:

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>GMavenPlus</groupId>
        <artifactId>GMavenPlus-Plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <phase>site</phase>
            <goals>
              <goal>groovydoc</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <groovydocOutputDirectory>\${project.reporting.outputDirectory}/gapidocs</groovydocOutputDirectory>
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    ....
  </dependencies>
  ...
</project>
+-----+

 When you execute <<<mvn site>>>, Groovydoc will be generated for the main sources.


* {Execute Scripts}

 Note that you can't yet use project dependencies in your scripts.  You can
 use Groovy's {{{http://groovy.codehaus.org/Grape}@Grab}} annotations, but you
 will need a compile dependency on Ivy since GMavenPlus doesn't depend on Ivy.
 Also note that you need to escape any dollar signs in your script so Maven
 doesn't try to filter the values.
 To execute Groovy scripts in your pom, add something similar to the following:

+-----+
<project>
  ...
  <build>
    <plugins>
      <plugin>
        <groupId>GMavenPlus</groupId>
        <artifactId>GMavenPlus-Plugin</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>execute</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <scripts>
            <script><![CDATA[
              @Grapes([
                @Grab(group='commons-lang', module='commons-lang', version='2.6')
              ])
              import org.apache.commons.lang.SystemUtils
              println "Using Java $${SystemUtils.JAVA_VERSION}"
            ]]></script>
            <script>file:///\${project.basedir}/src/main/groovy/HelloWorld2.groovy</script>
          </scripts>
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  <dependencies>
    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <!-- any version of Groovy should work here -->
      <version>${groovyVersion}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.ivy</groupId>
      <artifactId>ivy</artifactId>
      <!-- any version of Ivy should work here -->
      <version>2.2.0</version>
    </dependency>
    ....
  </dependencies>
  ...
</project>
+-----+

 When you execute <<<mvn gmavenplus:execute>>>, your scripts will be executed.
